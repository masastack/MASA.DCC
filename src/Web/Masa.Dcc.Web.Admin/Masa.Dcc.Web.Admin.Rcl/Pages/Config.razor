@page "/{AppId:int}/{EnvironmentClusterId:int}/{ConfigObjectType:int}/Config"
@inherits MasaCompontentBase

<div class="d-flex">
    <MNavigationDrawer Right Permanent Class="rounded-4" Width="300" Style="@Style">
        <div style="min-width:300px; padding:16px 24px; display:flex; flex-direction:column; align-items:center; overflow: auto;">
            <div style="width:100%;" class="regular--text body2">
                <MRow NoGutters Align="AlignTypes.Center" Justify="JustifyTypes.SpaceBetween">
                    <div class="full-width d-flex">
                        <div class="emphasis--text h6">@_appDetail.Name</div>
                        <MSpacer></MSpacer>
                        <MMenu OffsetY>
                            <ActivatorContent>
                                <MButton Icon @attributes="@context.Attrs">
                                    <MIcon Color="black">mdi-dots-horizontal</MIcon>
                                </MButton>
                            </ActivatorContent>
                            <ChildContent>
                                @*<MList Disabled Dense>
                                <MListItem Dense>
                                <MIcon Color="#323D6F" Class="mr-4">mdi-key-outline</MIcon>
                                <MListItemContent>
                                <MListItemTitle>管理密钥</MListItemTitle>
                                </MListItemContent>
                                </MListItem>
                                </MList>
                                <MList Disabled Dense>
                                <MListItem Dense>
                                <MIcon Color="#323D6F" Class="mr-4">mdi-refresh</MIcon>
                                <MListItemContent>
                                <MListItemTitle>强制刷新密钥</MListItemTitle>
                                </MListItemContent>
                                </MListItem>
                                </MList>*@
                                @if (ConfigObjectType != ConfigObjectType.Public)
                                {
                                    <MList Dense>
                                        <MListItem Dense OnClick="()=>ShowCloneModalAsync()">
                                            <MIcon Color="#323D6F" Size="20" Class="mr-4">far fa-copy</MIcon>
                                            <MListItemContent>
                                                <MListItemTitle>@T("Clone config")</MListItemTitle>
                                            </MListItemContent>
                                        </MListItem>
                                    </MList>
                                }
                            </ChildContent>
                        </MMenu>
                    </div>
                </MRow>
                <MRow NoGutters Class="regular3--text body2">
                    <div class="regular--text">@_appDetail.Type</div>&nbsp;|
                    @_appDetail.Identity
                </MRow>
                @if (ConfigObjectType == ConfigObjectType.App)
                {
                    <MRow NoGutters Class="mt-4">
                        @_appDetail.Description
                    </MRow>
                }
                <MRow NoGutters Class="regular3--text btn mt-6">@T("Environment")</MRow>
                <MRow NoGutters>
                    <MChipGroup Column>
                        @foreach (var item in _appEnvs)
                        {
                            var isSelected = _selectCluster.EnvironmentName == item.EnvironmentName;
                            var textColor = isSelected ? "white" : "";
                            <MChip OnClick="()=>OnEnvChipClick(item.EnvironmentName)"
                               Outlined="@(_selectEnvName != item.EnvironmentName)"
                               Style="@($"border:1px solid {@item.EnvironmentColor} !important;")"
                               Color="@item.EnvironmentColor"
                               TextColor="@textColor"
                               Class="mr-3 mt-3 text-overflow">
                                @item.EnvironmentName
                            </MChip>
                        }
                    </MChipGroup>
                </MRow>
                <MRow NoGutters Class="regular3--text btn mt-6">@T("Cluster")</MRow>
                <MRow NoGutters>
                    <MChipGroup Column>
                        @foreach (var item in _appClusters)
                        {
                            var isSelected = _selectCluster.ClusterName == item.ClusterName;
                            var textColor = isSelected ? "white" : "";
                            <MChip OnClick="()=>OnClusterChipClick(item)"
                               Outlined="@(!isSelected)"
                               TextColor="@textColor"
                               Color="#323D6F"
                               Class="mr-3 mt-3 text-overflow">
                                @item.ClusterName
                            </MChip>
                        }
                    </MChipGroup>
                </MRow>
            </div>
        </div>
        @if (ConfigObjectType == ConfigObjectType.App)
        {
            <div @onclick="ShowRelationModal" style="width:100%; color:#323D6F; font-size:14px; position: fixed; right:24px; bottom: 24px;" class="d-flex justify-end hover-pointer">
                <MIcon Size="16" Class="mr-1">mdi-link-variant</MIcon>@T("Connect public config")
            </div>
        }
    </MNavigationDrawer>

    <div class="pl-6" style="width: calc(100% - 300px); display:block;">
        <div style="overflow: hidden;">
            <div class="d-flex mb-3">
                <MTextField @bind-Value="_configObjectName" OnKeyDown="SearchConfigObject" Class="rounded-2" Height="40" Flat Dense Solo HideDetails="@("auto")" Placeholder="@T("Please enter the config name and press enter to query")">
                    <PrependInnerContent>
                        <MIcon Size=16 Class="mr-2 neutral-lighten-1--text">mdi-magnify</MIcon>
                    </PrependInnerContent>
                </MTextField>
                <MButton Height="40" Width="100" Class="rounded-pill ml-6" Color="primary" OnClick="ShowAddConfigObjectModalAsync">
                    <MIcon Small>mdi-plus </MIcon>@T("Add")
                </MButton>
            </div>
            <div class="mt-3" style="overflow:auto; @ConfigPanelStyle">
                <MExpansionPanels @bind-Values="_selectPanels" Flat Accordion>
                    @foreach (var configObject in _configObjects)
                    {
                        var formatLabelCode = configObject.FormatLabelCode.Trim().ToLower();
                        if (formatLabelCode == "json")
                        {
                            <MExpansionPanel Value="configObject.Id" Class="rounded-5 my-3">
                                <MExpansionPanelHeader Context="_" Style="height: 56px;" Class="my-6">
                                    <ChildContent>
                                        <div class="emphasis--text h6 d-flex align-center">
                                            @if (configObject.FromRelation)
                                            {
                                                <MIcon Color="primary" Class="mr-2">mdi-link-variant</MIcon>
                                            }
                                            @{
                                                string content = configObject.Content.Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", "");
                                                string tempContent = configObject.TempContent.Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", "");
                                                if (configObject.RelationConfigObjectId == 0 && !configObject.IsPublished && content != tempContent)
                                                {
                                                            <div class="mr-2" style="height: 26px; padding:0 6px; background: #FF7D00; text-align: center; font-size: 12px;color: white; border-radius: 16px; font-weight: normal; line-height: 26px;">
                                                                @T("Modified")
                                                            </div>
                                                }
                                            }
                                            <MHover Context="hContext">
                                                <div @attributes=hContext.Attrs class="hover-pointer d-flex align-center">
                                                    <span class="mr-2">@configObject.Name</span>
                                                    <div @onclick="()=>Copy(configObject.Name)" @onclick:stopPropagation>
                                                        <SIcon Tooltip="@T("Copy name")"
                                                       Color="@(_configNameCopyClicked ? "success" : "gray")"
                                                       Style="@(hContext.Hover ? "width: 18px; height: 18px; margin-right: 12px; transition: 0.5s;" : "opacity:0; width: 18px; height: 0px; margin-left: -24px; transition: 0.4s;")">
                                                            @(_configNameCopyClicked ? _checkSvg : _copySvg)
                                                        </SIcon>
                                                    </div>
                                                </div>
                                            </MHover>
                                            <div class="regular3--text btn d-flex">
                                                <span>|</span>
                                                <sapn class="ml-2">@configObject.FormatName</sapn>
                                            </div>
                                            <MSpacer></MSpacer>
                                            <MButton StopPropagation Icon Class="mr-4" OnClick="()=> UpdateJsonConfigAsync(configObject)">
                                                @if (!configObject.IsEditing)
                                                {
                                                    var relation = configObject.RelationConfigObjectId != 0;
                                                    <SIcon Tooltip="@(relation ? T("UnConnected"):T("Edit"))" Color="#323D6F">@(relation ? "mdi-link-variant-off" : "mdi-pencil")</SIcon>
                                                }
                                                else
                                                {
                                                    <SIcon Tooltip="@(T("Save"))" Color="success">mdi-check</SIcon>
                                                }
                                            </MButton>
                                            @if (ConfigObjectType != ConfigObjectType.Public && configObject.FromRelation == false)
                                            {
                                                <MButton Disabled="configObject.IsEditing" StopPropagation Icon Class="mr-4" OnClick="()=>ShowCloneModalAsync(configObject)"><SIcon Tooltip="@(T("Clone"))" Size="20" Color="#323D6F">fas fa-copy</SIcon></MButton>
                                            }
                                            <MButton Disabled="configObject.IsEditing" StopPropagation Icon Class="mr-4" OnClick="()=>ShowReleaseModalAsync(configObject)"><SIcon Tooltip="@(T("Publish"))" Color="#323D6F">mdi-send</SIcon></MButton>
                                            <MMenu OffsetY>
                                                <ActivatorContent>
                                                    <MButton Disabled="configObject.IsEditing" @attributes="@context.Attrs" StopPropagation Icon Class="mr-4">
                                                        <MIcon Color="#323D6F">mdi-dots-vertical</MIcon>
                                                    </MButton>
                                                </ActivatorContent>
                                                <ChildContent>
                                                    <MList>
                                                        <MListItem OnClick="()=>ShowReleaseHistoryAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-history</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>@T("Release history")</MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MListItem OnClick="()=>ShowRollbackModalAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-repeat</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>
                                                                    @T("Rollback")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MListItem OnClick="()=>RevokeAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-subdirectory-arrow-left</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>
                                                                    @T("Revoke")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MDivider></MDivider>
                                                        <MListItem OnClick="()=>RemoveAsync(configObject)">
                                                            <MIcon Class="mr-4" Color="error">mdi-delete</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle Class="error--text">
                                                                    @T("Delete")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                    </MList>
                                                </ChildContent>
                                            </MMenu>
                                            <span class="mr-6 regular3--text btn">|</span>
                                        </div>
                                    </ChildContent>
                                    <ActionsContent>
                                        <MIcon Color="#485585">
                                            mdi-chevron-down
                                        </MIcon>
                                    </ActionsContent>
                                </MExpansionPanelHeader>
                                <MExpansionPanelContent>
                                    @if (configObject.FromRelation && configObject.RelationConfigObjectId != 0)
                                    {
                                        <div class="mb-2">
                                            <MIcon Size="18" Color="#7681AB">mdi-link-variant</MIcon>
                                            <span style="font-size: 14px; color: #7681AB;">
                                                @T("Connected")
                                                <span class="regular3--text btn mx-1 font-size: 6px !important;">|</span>
                                                @(configObject.IsPublished ? @T("Released") : @T("UnReleased"))
                                            </span>
                                        </div>
                                    }
                                    else if (configObject.FromRelation && configObject.RelationConfigObjectId == 0)
                                    {
                                        <div class="mb-2">
                                            <MIcon Size="18" Color="#7681AB">mdi-link-variant-off</MIcon>
                                            <span style="font-size: 14px; color: #7681AB;">@T("Covered")</span>
                                        </div>
                                    }
                                    <JsonEditor Disabled="!configObject.IsEditing" @bind-Value="@configObject.Content"></JsonEditor>
                                </MExpansionPanelContent>
                            </MExpansionPanel>
                        }
                        else if (formatLabelCode == "properties")
                        {
                            <MExpansionPanel Value="configObject.Id" Class="rounded-5 my-3">
                                <MExpansionPanelHeader Context="_" Style="height: 56px;" Class="my-6">
                                    <ChildContent>
                                        <div class="emphasis--text h6 d-flex align-center">
                                            @if (configObject.FromRelation)
                                            {
                                                <SIcon Tooltip="@(T("Connected"))" Color="primary" Class="mr-2">mdi-link-variant</SIcon>
                                            }
                                            @if (configObject.RelationConfigObjectId == 0 && !configObject.IsPublished && !configObject.IsEditing)
                                            {
                                                <div class="mr-2" style="height: 26px; padding:0 6px; background: #FF7D00; text-align: center; font-size: 12px;color: white; border-radius: 16px; font-weight: normal; line-height: 26px;">
                                                    @T("Modified")
                                                </div>
                                            }
                                            <MHover Context="hContext">
                                                <div @attributes=hContext.Attrs class="hover-pointer d-flex align-center">
                                                    <span class="mr-2">@configObject.Name</span>
                                                    <div @onclick="()=>Copy(configObject.Name)" @onclick:stopPropagation>
                                                        <SIcon Tooltip="@T("Copy name")"
                                                       Color="@(_configNameCopyClicked ? "success" : "gray")"
                                                       Style="@(hContext.Hover ? "width: 18px; height: 18px; margin-right: 12px; transition: 0.5s;" : "opacity:0; width: 18px; height: 0px; margin-left: -24px; transition: 0.4s;")">
                                                            @(_configNameCopyClicked ? _checkSvg : _copySvg)
                                                        </SIcon>
                                                    </div>
                                                </div>
                                            </MHover>
                                            <div class="regular3--text btn d-flex">
                                                <span>|</span>
                                                <sapn class="ml-2">@configObject.FormatName</sapn>
                                            </div>
                                            <MSpacer></MSpacer>
                                            @if (!configObject.FromRelation)
                                            {
                                                <MButton Disabled="configObject.ElevationTabPropertyContent.Disabled" StopPropagation Icon Class="mr-4" OnClick="()=>ShowPropertyModal(configObject,configObject.ConfigObjectPropertyContents)"><SIcon Tooltip="@(T("Add config item"))" Color="#323D6F">mdi-plus-circle</SIcon></MButton>
                                            }
                                            @if (ConfigObjectType != ConfigObjectType.Public && configObject.FromRelation == false)
                                            {
                                                <MButton Disabled="configObject.ElevationTabPropertyContent.Disabled" StopPropagation Icon Class="mr-4" OnClick="()=>ShowCloneModalAsync(configObject)"><SIcon Tooltip="@(T("Clone"))" Size="20" Color="#323D6F">fas fa-copy</SIcon></MButton>
                                            }
                                            <MButton Disabled="configObject.ElevationTabPropertyContent.Disabled" StopPropagation Icon Class="mr-4" OnClick="()=>ShowReleaseModalAsync(configObject)"><SIcon Tooltip="@(T("Publish"))" Color="#323D6F">mdi-send</SIcon></MButton>
                                            <MMenu OffsetY>
                                                <ActivatorContent>
                                                    <MButton Disabled="configObject.ElevationTabPropertyContent.Disabled" @attributes="@context.Attrs" StopPropagation Icon Class="mr-4">
                                                        <MIcon Color="#323D6F">mdi-dots-vertical</MIcon>
                                                    </MButton>
                                                </ActivatorContent>
                                                <ChildContent>
                                                    <MList>
                                                        <MListItem OnClick="()=>ShowReleaseHistoryAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-history</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>@T("Release history")</MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MListItem OnClick="()=>ShowRollbackModalAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-repeat</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>
                                                                    @T("Rollback")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MListItem OnClick="()=>RevokeAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-subdirectory-arrow-left</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>
                                                                    @T("Revoke")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MDivider></MDivider>
                                                        <MListItem OnClick="()=>RemoveAsync(configObject)">
                                                            <MIcon Class="mr-4" Color="error">mdi-delete</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle Class="error--text">
                                                                    @T("Delete")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                    </MList>
                                                </ChildContent>
                                            </MMenu>
                                            <span class="mr-6 regular3--text btn">|</span>
                                        </div>
                                    </ChildContent>
                                    <ActionsContent>
                                        <MIcon Color="#485585">
                                            mdi-chevron-down
                                        </MIcon>
                                    </ActionsContent>
                                </MExpansionPanelHeader>
                                <MExpansionPanelContent>
                                    @if (configObject.RelationConfigObjectId != 0)
                                    {
                                        <MCard Style="border:1px solid #E2E7F4;" Class="py-3 mt-4 rounded-5">
                                            <MDataTable Headers="Headers"
                                            SortDesc="true"
                                            SortBy="new List<string>{ nameof(ConfigObjectPropertyModel.IsPublished) }"
                                            TItem="ConfigObjectPropertyModel"
                                            Items="@configObject.ConfigObjectPropertyContents"
                                            Class="table-border-none"
                                            HideDefaultFooter>
                                                <HeaderColContent Context="header">
                                                    <span class="regular3--text btn">@header.Text</span>
                                                </HeaderColContent>
                                                <ItemColContent>
                                                    @switch (context.Header.Value)
                                                    {
                                                        case nameof(ConfigObjectPropertyModel.IsPublished):
                                                            string icon = context.Item.IsRelationed ? "mdi-link-variant" : "mdi-link-variant-off";
                                                            string color = "";
                                                            string text = "";
                                                            @if (context.Item.IsPublished)
                                                            {
                                                                color = "#05CD99";
                                                                text = @T("Released");
                                                            }
                                                            else
                                                            {
                                                                color = "#7681AB";
                                                                text = @T("UnReleased");
                                                            }
                                                            <MIcon Style="margin-bottom:2px;" Size="20" Color="@color">@icon</MIcon>
                                                            <span style="color: @color;">@text</span>
                                                            break;
                                                        case "Operation":
                                                            <SIcon Class="mr-3 hover-pointer" Color="#485585" Size="20" OnClick="()=>ShowPropertyModal(configObject, null, context.Item)">mdi-link-variant-off</SIcon>
                                                            break;
                                                        case nameof(ConfigObjectPropertyModel.ModificationTime):
                                                            <span>@context.Item.ModificationTime.ToString(T("$DateTimeFormat"))</span>
                                                            break;
                                                        default:
                                                            @context.Value
                                                            break;
                                                    }
                                                </ItemColContent>
                                            </MDataTable>
                                        </MCard>
                                    }
                                    else
                                    {
                                        <SElevationTab Tab="@T(configObject.ElevationTabPropertyContent.TabText)"
                                           Left
                                           TabChanged="tabText=>HandleTabIndexChanged(tabText, configObject)"
                                           TabMinWidth="70"
                                           ItemsClass="rounded-5"
                                           Dense
                                           Tabs="@(new List<string>{ T("Table"), T("Text") })">
                                            <SElevationTabItem>
                                                <MCard Style="border:1px solid #E2E7F4; padding: 1px;" Class="py-3 mt-4 rounded-5">
                                                    <MDataTable Headers="Headers"
                                                    SortDesc="true"
                                                    SortBy="new List<string>{ nameof(ConfigObjectPropertyModel.IsPublished) }"
                                                    TItem="ConfigObjectPropertyModel"
                                                    Items="@configObject.ConfigObjectPropertyContents"
                                                    Class="table-border-none"
                                                    HideDefaultFooter>
                                                        <HeaderColContent Context="header">
                                                            <span class="regular3--text btn">@header.Text</span>
                                                        </HeaderColContent>
                                                        <ItemColContent>
                                                            @switch (@context.Header.Value)
                                                            {
                                                                case nameof(ConfigObjectPropertyModel.IsPublished):
                                                                    if (context.Item.IsPublished)
                                                                    {
                                                                        <MIcon Style="margin-bottom:2px;" Size="16 " Color="#05CD99">mdi-send</MIcon>
                                                                        <span style="color:#05CD99;">@T("Released")</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        if (context.Item.IsAdded)
                                                                        {
                                                                            <MIcon Class="mr-1" Color="#7681AB" Style="margin-bottom:2px;" Size="16">mdi-plus</MIcon>
                                                                        }
                                                                        else if (context.Item.IsEdited)
                                                                        {
                                                                            <MIcon Class="mr-1" Color="#7681AB" Style="margin-bottom:2px;" Size="16">mdi-pencil</MIcon>
                                                                        }
                                                                        else if (context.Item.IsDeleted)
                                                                        {
                                                                            <MIcon Class="mr-1" Color="error" Style="margin-bottom:2px;" Size="16">mdi-delete</MIcon>
                                                                        }
                                                                        <span>@T("UnReleased")</span>
                                                                    }
                                                                    break;
                                                                case "Operation":
                                                                    @if (!context.Item.IsDeleted)
                                                                    {
                                                                        <MIcon Class="mr-3 hover-pointer" Color="#485585" Size="20" OnClick="()=>ShowPropertyModal(configObject, null, context.Item)">mdi-pencil</MIcon>
                                                                        <MIcon Class="hover-pointer" Style="color: #FF5252 !important;" Size="20" OnClick="()=>DeleteConfigObjectPropertyContentAsync(context.Item, configObject.Id)">mdi-delete</MIcon>
                                                                    }
                                                                    break;
                                                                case nameof(ConfigObjectPropertyModel.ModificationTime):
                                                                    <span>@context.Item.ModificationTime.ToString(T("$DateTimeFormat"))</span>
                                                                    break;
                                                                default:
                                                                    @context.Value
                                                                    break;
                                                            }
                                                        </ItemColContent>
                                                    </MDataTable>
                                                </MCard>
                                            </SElevationTabItem>
                                            <SElevationTabItem>
                                                <div class="d-flex justify-end">
                                                    <MButton StopPropagation Icon Class="mr-4 mb-2">
                                                        @if (!configObject.ElevationTabPropertyContent.Disabled)
                                                        {
                                                            <SIcon Tooltip="@(T("Edit"))" Class="hover-pointer" OnClick="()=>{ configObject.ElevationTabPropertyContent.Disabled = !configObject.ElevationTabPropertyContent.Disabled; }" Color="#323D6F">mdi-pencil</SIcon>
                                                        }
                                                        else
                                                        {
                                                            <SIcon Tooltip="@(T("Save"))" OnClick="()=>TextConvertPropertyAsync(configObject.Id)" Color="success">mdi-check</SIcon>
                                                        }
                                                    </MButton>
                                                </div>
                                                <Editor Disabled="!configObject.ElevationTabPropertyContent.Disabled" @bind-Value="@configObject.ElevationTabPropertyContent.Content"></Editor>
                                            </SElevationTabItem>
                                        </SElevationTab>
                                    }
                                </MExpansionPanelContent>
                                <hr class="mx-6" style="background: none repeat scroll 0 0 #E9EDF7; border: thin none; height: 1px;" />
                            </MExpansionPanel>
                        }
                        else
                        {
                            <MExpansionPanel Value="configObject.Id" Class="rounded-5 my-3">
                                <MExpansionPanelHeader Context="_" Style="height: 56px;" Class="my-6">
                                    <ChildContent>
                                        <div class="emphasis--text h6 d-flex align-center">
                                            @if (configObject.FromRelation)
                                            {
                                                <SIcon Tooltip="@(T("Connected"))" Color="primary" Class="mr-2">mdi-link-variant</SIcon>
                                            }
                                            @{
                                                string content = configObject.Content.Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", "");
                                                string tempContent = configObject.TempContent.Replace("\n", "").Replace(" ", "").Replace("\t", "").Replace("\r", "");
                                                if (configObject.RelationConfigObjectId == 0 && !configObject.IsPublished && !configObject.IsEditing && content != tempContent)
                                                {
                                                            <div class="mr-2" style="height: 26px; padding:0 6px; background: #FF7D00; text-align: center; font-size: 12px;color: white; border-radius: 16px; font-weight: normal; line-height: 26px;">
                                                                @T("Modified")
                                                            </div>
                                                }
                                            }
                                            <MHover Context="hContext">
                                                <div @attributes=hContext.Attrs class="hover-pointer d-flex align-center">
                                                    <span class="mr-2">@configObject.Name</span>
                                                    <div @onclick="()=>Copy(configObject.Name)" @onclick:stopPropagation>
                                                        <SIcon Tooltip="@T("Copy name")"
                                                       Color="@(_configNameCopyClicked ? "success" : "gray")"
                                                       Style="@(hContext.Hover ? "width: 18px; height: 18px; margin-right: 12px; transition: 0.5s;" : "opacity:0; width: 18px; height: 0px; margin-left: -24px; transition: 0.4s;")">
                                                            @(_configNameCopyClicked ? _checkSvg : _copySvg)
                                                        </SIcon>
                                                    </div>
                                                </div>
                                            </MHover>
                                            <div class="regular3--text btn d-flex">
                                                <span>|</span>
                                                <sapn class="ml-2">@configObject.FormatName</sapn>
                                            </div>
                                            <MSpacer></MSpacer>
                                            <MButton StopPropagation Icon Class="mr-4" OnClick="()=> UpdateOtherConfigObjectContentAsync(configObject)">
                                                @if (!configObject.IsEditing)
                                                {
                                                    var relation = configObject.RelationConfigObjectId != 0;
                                                    <SIcon Tooltip="@(relation ? T("UnConnected"):T("Edit"))" Color="#323D6F">@(relation ? "mdi-link-variant-off" : "mdi-pencil")</SIcon>
                                                }
                                                else
                                                {
                                                    <SIcon Tooltip="@(T("Save"))" Color="success">mdi-check</SIcon>
                                                }
                                            </MButton>
                                            @if (ConfigObjectType != ConfigObjectType.Public && configObject.FromRelation == false)
                                            {
                                                <MButton Disabled="configObject.IsEditing" StopPropagation Icon Class="mr-4" OnClick="()=>ShowCloneModalAsync(configObject)"><SIcon Tooltip="@T("Clone")" Size="20" Color="#323D6F">fas fa-copy</SIcon></MButton>
                                            }
                                            <MButton Disabled="configObject.IsEditing" StopPropagation Icon Class="mr-4" OnClick="()=>ShowReleaseModalAsync(configObject)"><SIcon Tooltip="@T("Publish")" Color="#323D6F">mdi-send</SIcon></MButton>
                                            <MMenu OffsetY>
                                                <ActivatorContent>
                                                    <MButton Disabled="configObject.IsEditing" @attributes="@context.Attrs" StopPropagation Icon Class="mr-4">
                                                        <MIcon Color="#323D6F">mdi-dots-vertical</MIcon>
                                                    </MButton>
                                                </ActivatorContent>
                                                <ChildContent>
                                                    <MList>
                                                        <MListItem OnClick="()=>ShowReleaseHistoryAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-history</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>@T("Release history")</MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MListItem OnClick="()=>ShowRollbackModalAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-repeat</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>
                                                                    @T("Rollback")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MListItem OnClick="()=>RevokeAsync(configObject)">
                                                            <MIcon Class="mr-4">mdi-subdirectory-arrow-left</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle>
                                                                    @T("Revoke")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                        <MDivider></MDivider>
                                                        <MListItem OnClick="()=>RemoveAsync(configObject)">
                                                            <MIcon Class="mr-4" Color="error">mdi-delete</MIcon>
                                                            <MListItemContent>
                                                                <MListItemTitle Class="error--text">
                                                                    @T("Delete")
                                                                </MListItemTitle>
                                                            </MListItemContent>
                                                        </MListItem>
                                                    </MList>
                                                </ChildContent>
                                            </MMenu>
                                            <span class="mr-6 regular3--text btn">|</span>
                                        </div>
                                    </ChildContent>
                                    <ActionsContent>
                                        <MIcon Color="#485585">
                                            mdi-chevron-down
                                        </MIcon>
                                    </ActionsContent>
                                </MExpansionPanelHeader>
                                <MExpansionPanelContent>
                                    @if (configObject.FromRelation && configObject.RelationConfigObjectId != 0)
                                    {
                                        <div class="mb-2">
                                            <MIcon Size="18" Color="#7681AB">mdi-link-variant</MIcon>
                                            <span style="font-size: 14px; color: #7681AB;">
                                                @T("Connected")
                                                <span class="regular3--text btn mx-1 font-size: 6px !important;">|</span>
                                                @(configObject.IsPublished ? @T("Released") : @T("UnReleased"))
                                            </span>
                                        </div>
                                    }
                                    else if (configObject.FromRelation && configObject.RelationConfigObjectId == 0)
                                    {
                                        <div class="mb-2">
                                            <MIcon Size="18" Color="#7681AB">mdi-link-variant-off</MIcon>
                                            <span style="font-size: 14px; color: #7681AB;">@T("Covered")</span>
                                        </div>
                                    }
                                    <Editor Disabled="!configObject.IsEditing" @bind-Value="@configObject.Content"></Editor>
                                </MExpansionPanelContent>
                                <hr class="mx-6" style="background: none repeat scroll 0 0 #E9EDF7; border: thin none; height: 1px;" />
                            </MExpansionPanel>
                        }
                    }
                </MExpansionPanels>
            </div>
        </div>
    </div>
</div>

<AddConfigObjectModal @ref="_addConfigObjectModal" AppDetail="_appDetail"
                      ConfigObjectType="ConfigObjectType"
                      OnSubmitAfter="()=>GetConfigObjectsAsync(_selectCluster.Id, ConfigObjectType)">
</AddConfigObjectModal>

<SSheetDialog @key="@($"propertyConfigModal-{_propertyConfigModal.Visible}")" Value="_propertyConfigModal.Visible" ValueChanged="PropertyConfigModalValueChanged" Title="@(_propertyConfigModal.HasValue ? T("Modify config object item") : T("Create config object item"))" Icon="mdi-circle" IconColor="success">
    <MForm Class="full-height" Context="formContext" EnableValidation Model="_propertyConfigModal.Data">
        <div class="d-flex flex-column" style="width:100%; height:100%; padding: 48px 228px">
            <div>
                <div class="emphasis--text h6 d-flex align-center">
                    @_selectConfigObject.Name
                    <span class="ml-3 regular3--text btn">|</span>
                    <sapn class="ml-2 regular3--text btn">Properties</sapn>
                </div>
                <STextField Class="mt-12" Disabled="_propertyConfigModal.HasValue" Label="Key" Outlined @bind-Value="_propertyConfigModal.Data.Key"></STextField>
                <STextField Class="mt-6" Label="Value" Outlined @bind-Value="_propertyConfigModal.Data.Value"></STextField>
                <MTextarea Class="mt-6" Label="@T("Description")" Dense Outlined @bind-Value="_propertyConfigModal.Data.Description"></MTextarea>
            </div>
            <div class="d-flex justify-end align-end" style="width:100%; height:100%;">
                <MButton Height="40" Class="rounded-pill" Color="primary" Width="100" OnClick="()=>SubmitPropertyConfigAsync(formContext)">@(_propertyConfigModal.HasValue ? T("Save") : T("Submit"))</MButton>
                </div>
            </div>
        </MForm>
</SSheetDialog>

<ReleaseModal @bind-Value="@_showReleaseModal"
          Content="@_configObjectReleaseContent"
          AppDetail="@_appDetail"
          SelectConfigObject="@_selectConfigObject"
          SelectCluster="@_selectCluster"
          SelectConfigObjectAllProperties="@_selectConfigObjectAllProperties"
          OnSubmitAfter="async ()=>{ await GetConfigObjectsAsync(_selectCluster.Id, ConfigObjectType); }" />

<RollbackModal @bind-Value="_showRollbackModal"
           FormatLabelCode="@_releaseHistory.FormatLabelCode"
           CurrentConfigObjectRelease="@(_releaseHistory.ConfigObjectReleases.FirstOrDefault() ?? new())"
           RollbackConfigObjectRelease="@(_releaseHistory.ConfigObjectReleases.LastOrDefault() ?? new())"
           OnClick="RollbackAsync"
           OnClickAfter="_handleRollbackOnClickAfter" />

<SSheetDialog @key="@($"releaseHistoryModal-{_showReleaseHistory}")" @bind-Value="_showReleaseHistory" Title="@T("Release history")" Icon="mdi-circle" IconColor="success">
    <div class="d-flex flex-column" style="width:100%; height:100%; padding: 48px 228px">
        <div>
            <div class="emphasis--text h6 d-flex align-center">
                @_selectConfigObject.Name
                <span class="ml-3 regular3--text btn">|</span>
                <sapn class="ml-2 regular3--text btn">@_releaseHistory.FormatLabelCode</sapn>
            </div>
        </div>
        <div class="d-flex full-height full-width mt-12" style="overflow: hidden;">
            <div class="full-height" style="min-width: 248px; width: 248px; border-right: 1px solid #E2E7F4; overflow-x: hidden; overflow-y: auto;">
                <MTimeline>
                    @{
                        int _index = 0;
                        foreach (var release in _configObjectReleases)
                        {
                            int index = _index;
                            _index++;
                            <MTimelineItem HideDot="!release.IsActive" Color="primary" Small Right @onclick="()=>OnTimelineItemClickAsync(release)">
                                <OppositeContent>
                                    <div>
                                        <div style="@(release.IsActive ? "font-size:14px; font-weight: 600; color: #1B2559;" : "font-size:12px; font-weight: 500; color: #485585;")">
                                            @release.CreationTime.ToString("MM-dd").TrimStart('0')
                                        </div>
                                        @if (index == 0)
                                        {
                                            <div style="font-size:10px; font-weight: 400; color: #A3AED0;">@T("Current")</div>
                                        }
                                        else if (release.IsInvalid)
                                        {
                                            <div style="font-size:10px; font-weight: 400; color: #A3AED0;">@T("Rollbacked")</div>
                                        }
                                    </div>
                                </OppositeContent>
                                <ChildContent>
                                    <div class="text-overflow2" style="@(release.IsActive ? "font-size:14px; font-weight: 600; color: #1B2559;" : "font-size:12px; font-weight: 500; color: #485585;")">
                                        @release.Name
                                    </div>
                                </ChildContent>
                            </MTimelineItem>
                        }
                    }
                </MTimeline>
            </div>
            <div class="ml-12 content full-height full-width pr-1" style="overflow-y: auto;">
                <div class="full-width d-flex align-center pl-2 pr-3" style="height: 40px; background: #F0F3FA; border-radius: 8px;">
                    @if (_selectReleaseHistory.IsInvalid)
                    {
                        <MChip Class="mr-4" Small Label Color="#323D6F" TextColor="white">@T("Rollbacked")</MChip>
                    }
                    <span class="text-overflow" style="color: #485585; font-weight: 700; font-size: 16px; width:700px;">@_selectReleaseHistory.Name</span>
                    <MSpacer></MSpacer>
                    <span style="color: #A3AED0; font-size:12px;">@T("Release time")：@_selectReleaseHistory.CreationTime.ToString(T("$DateTimeFormat"))</span>
                    <span class="mx-2">|</span>
                    <span style="color: #323D6F; font-size:12px;">@_selectReleaseHistory.CreatorName</span>
                </div>
                <div class="mt-6">
                    @if (!string.IsNullOrWhiteSpace(_selectReleaseHistory.Comment))
                    {
                        <span style="color: #323D6F; font-size: 14px;">
                            @T("Description")：
                        </span>
                    }
                    <span style="color: #7681AB; font-size: 14px;">@_selectReleaseHistory.Comment</span>
                </div>
                @if (_releaseHistory.FormatLabelCode.Trim().ToLower() == "properties")
                {
                    <SElevationTab Class="mt-12"
                               Left
                               Tab="@T(_releaseTabText)"
                               TabChanged="tabText => ReleaseHistoryTabIndexChanged(tabText)"
                               ItemsClass="rounded-2"
                               Dense
                               TabMinWidth="160"
                               Tabs="@(new List<string>{ @T("All configuration"), @T("Changed configuration")})">
                        <SElevationTabItem>
                            <div style="border:1px solid #E2E7F4;" class="py-1 mt-4 rounded-2">
                                <MDataTable Headers="_allConfigheaders"
                                        DisableSort
                                        TItem="ConfigObjectPropertyModel"
                                        Items="@_selectReleaseHistory.ConfigObjectProperties"
                                        Class="table-border-none"
                                        HideDefaultFooter>
                                    <HeaderColContent Context="header">
                                        <span class="regular3--text btn">@header.Text</span>
                                    </HeaderColContent>
                                </MDataTable>
                            </div>
                        </SElevationTabItem>
                        <SElevationTabItem>
                            <div style="border:1px solid #E2E7F4;" class="py-1 mt-4 rounded-2">
                                <MDataTable Headers="ChangedConfigheaders"
                                        DisableSort
                                        TItem="ConfigObjectPropertyModel"
                                        Items="@_changedProperties"
                                        Class="table-border-none"
                                        HideDefaultFooter>
                                    <HeaderColContent Context="header">
                                        <span class="regular3--text btn">@header.Text</span>
                                    </HeaderColContent>
                                    <ItemColContent>
                                        @switch (@context.Header.Value)
                                        {
                                            case nameof(ConfigObjectPropertyModel.IsPublished):
                                                if (context.Item.IsAdded)
                                                {
                                                    <MIcon Class="mr-1" Color="#7681AB" Style="margin-bottom:2px;" Size="16">mdi-plus</MIcon>
                                                }
                                                else if (context.Item.IsEdited)
                                                {
                                                    <MIcon Class="mr-1" Color="#7681AB" Style="margin-bottom:2px;" Size="16">mdi-pencil</MIcon>
                                                }
                                                else if (context.Item.IsDeleted)
                                                {
                                                    <MIcon Class="mr-1" Color="#7681AB" Style="margin-bottom:2px;" Size="16">mdi-delete</MIcon>
                                                }
                                                break;
                                            default:
                                                @context.Value
                                                break;
                                        }
                                    </ItemColContent>
                                </MDataTable>
                            </div>
                        </SElevationTabItem>
                    </SElevationTab>
                }
                else
                {
                    <div class="mt-12" style="color: #1B2559; font-weight: 700; font-size: 14px;">@T("All configuration")</div>
                    <div class="py-3">
                        <MTextarea HideDetails="true" Outlined Readonly Value="@_selectReleaseHistory.Content"></MTextarea>
                    </div>
                }
            </div>
        </div>
        <div class="d-flex justify-end align-end" style="width:100%;">
            <MButton Height="40" Class="rounded-pill mt-6" Color="primary" OnClick="RollbackToAsync">@T("Rollback to this version")</MButton>
        </div>
    </div>
</SSheetDialog>

<CloneModal @ref="_cloneModal"
            ConfigObjects="_configObjects"
            SelectCluster="_selectCluster"
            ConfigObjectType="ConfigObjectType"
            AppDetail="_appDetail"
            ProjectDetail="_projectDetail"
            OnSubmitAfter="async ()=>{ await GetConfigObjectsAsync(_selectCluster.Id, ConfigObjectType); }">
</CloneModal>

<RelationModal @ref="_relation" AppDetail="_appDetail" OnSubmitAfter="()=>GetConfigObjectsAsync(EnvironmentClusterId,ConfigObjectType)" />

